generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model State {
  id     Int    @id @default(autoincrement())
  name   String
  cities City[]
}

model City {
  id      Int    @id @default(autoincrement())
  name    String
  stateId Int
  state   State  @relation(fields: [stateId], references: [id])
  towns   Town[]
}

model Town {
  id       Int      @id @default(autoincrement())
  name     String
  cityId   Int
  city     City     @relation(fields: [cityId], references: [id])
  parishes Parish[]
}

model Parish {
  id     Int      @id @default(autoincrement())
  name   String
  townId Int
  town   Town     @relation(fields: [townId], references: [id])
  people People[]
  events Events[]
  institutions Institutions[]
}

model People {
  id             Int      @id @default(autoincrement())
  name           String
  lastName       String
  address        String
  parishId       Int
  parish         Parish   @relation(fields: [parishId], references: [id])
  email          String
  phone          String
  identification String
  sex            String
  birthdate      DateTime

  createAt       DateTime         @default(now())
  updateAt       DateTime         @default(now())
  peoplePrograms PeoplePrograms[]
  collaborators  Collaborators[]
  deleted        Boolean          @default(false)
}

model Institutions {
  id       Int        @id @default(autoincrement())
  name     String
  rif      String //J0560276543650
  address  String
  country  String
  email    String
  type     String
  deleted  Boolean    @default(false)
  Donation Donation[]

  parishId  Int
  parish    Parish    @relation(fields: [parishId], references: [id])
}

// -------------------------------------------

model Programs {
  id             Int              @id @default(autoincrement())
  program        String
  type           String
  deleted        Boolean          @default(false)
  peoplePrograms PeoplePrograms[]
}

model PeoplePrograms {
  id        Int      @id @default(autoincrement())
  peopleId  Int
  people    People   @relation(fields: [peopleId], references: [id])
  programId Int
  program   Programs @relation(fields: [programId], references: [id])
}

// --------------------------------------------
model Documents {
  id            Int             @id @default(autoincrement())
  name          String
  date          DateTime
  filePath      String?
  fileName      String?
  mimeType      String?
  collaborators Collaborators[]
  deleted       Boolean         @default(false)
}

model Collaborators {
  id         Int       @id @default(autoincrement())
  documentId Int
  documento  Documents @relation(fields: [documentId], references: [id])
  peopleId   Int
  people     People    @relation(fields: [peopleId], references: [id])
}

// ---------------------------------------------------

model Events {
  id              Int               @id @default(autoincrement())
  name            String
  description     String
  address         String
  parishId        Int
  parish          Parish            @relation(fields: [parishId], references: [id])
  startDate       DateTime
  endDate         DateTime
  providersEvents ProvidersEvents[]
  deleted         Boolean           @default(false)
  createAt        DateTime          @default(now())
  updateAt        DateTime          @default(now())
}

model Providers {
  id              Int               @id @default(autoincrement())
  name            String
  rif             String //J0560276543650
  address         String //Av. La limpia
  country         String
  email           String
  providersEvents ProvidersEvents[]
  deleted         Boolean           @default(false)
  Donation        Donation[]
}

model ProvidersEvents {
  id         Int       @id @default(autoincrement())
  eventId    Int
  events     Events    @relation(fields: [eventId], references: [id])
  providerId Int
  providers  Providers @relation(fields: [providerId], references: [id])
}

model Users {
  id       Int    @id @default(autoincrement())
  name     String
  lastName String
  correo   String
  username String
  password String
}

// ---------------------------------------

model Category {
  id       Int        @id @default(autoincrement())
  category String
  medicine Medicine[]
}

model Forms {
  id       Int        @id @default(autoincrement())
  forms    String
  medicine Medicine[]
}

model Medicine {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  categoryId       Int
  category         Category           @relation(fields: [categoryId], references: [id])
  medicine         Boolean
  unit             String
  amount           Int
  temperate        String
  manufacturer     String
  activeIngredient String
  countryOfOrigin  String             @default("VE")
  formId           Int
  form             Forms              @relation(fields: [formId], references: [id])
  benefited        Int                @default(1)
  detDonation      DetDonation[]
  inventory        Inventory[]
  historyInventory HistoryInventory[]
}

model Store {
  id               Int                @id @default(autoincrement())
  name             String
  address          String
  inventory        Inventory[]
  historyInventory HistoryInventory[]
}

model Donation {
  id               Int                @id @default(autoincrement())
  institutionId    Int?
  providerId       Int?
  type             String
  date             DateTime
  lote             String
  createAt         DateTime           @default(now())
  updateAt         DateTime           @default(now())
  institution      Institutions?      @relation(fields: [institutionId], references: [id])
  provider         Providers?         @relation(fields: [providerId], references: [id])
  detDonation      DetDonation[]
  inventory        Inventory[]
  historyInventory HistoryInventory[]
}

model DetDonation {
  id         Int      @id @default(autoincrement())
  donationId Int
  donation   Donation @relation(fields: [donationId], references: [id])
  medicineId Int
  medicine   Medicine @relation(fields: [medicineId], references: [id])
  amount     Int
}

model Inventory {
  id             Int      @id @default(autoincrement())
  donationId     Int
  donation       Donation @relation(fields: [donationId], references: [id])
  medicineId     Int
  medicine       Medicine @relation(fields: [medicineId], references: [id])
  storeId        Int
  store          Store    @relation(fields: [storeId], references: [id])
  stock          Int
  admissionDate  DateTime
  expirationDate DateTime
  createAt       DateTime @default(now())
  updateAt       DateTime @default(now())
}

model HistoryInventory {
  id             Int      @id @default(autoincrement())
  medicineId     Int
  medicine       Medicine @relation(fields: [medicineId], references: [id])
  storeId        Int
  store          Store    @relation(fields: [storeId], references: [id])
  type           String
  amount         Int
  date           DateTime
  donationId     Int
  donation       Donation @relation(fields: [donationId], references: [id])
  observations   String
  admissionDate  DateTime
  expirationDate DateTime
  createAt       DateTime @default(now())
  updateAt       DateTime @default(now())
}
